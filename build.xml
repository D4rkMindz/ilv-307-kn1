<?xml version="1.0" encoding="UTF-8"?>
<project name="webapp" default="noop">
    <target name="noop"/>
    <property environment="env"/>
    <fileset id="files.php" dir="." includes="**/*.php" excludes="**/vendor/**"/>

    <condition property="is_windows">
        <os family="windows"/>
    </condition>

    <tstamp>
        <format property="now" pattern="yyyy-MM-dd HH:mm:ss" locale="en,UK"/>
        <format property="now_num" pattern="yyyyMMddHHmmss" locale="en,UK"/>
        <format property="now_file" pattern="yyyy-MM-dd_HHmmss" locale="en,UK"/>
        <format property="timestamp" pattern="MM_dd_yyyy_HH-mm-ss" locale="de, DE"/>
    </tstamp>

    <!-- File variables-->
    <property name="filename" value="contact_form_${timestamp}.zip"/>
    <property name="build_dir" value="${basedir}/build"/>

    <!-- By default, we assume all tools to be on the $PATH -->
    <condition property="ext" value=".bat">
        <os family="windows"/>
    </condition>

    <condition property="ext" value="">
        <os family="Unix"/>
    </condition>

    <!-- DISPLAYS WINDOWS OS -->
    <target name="display_windows" if="is_windows">
        <echo message="OS Family is: Windows"/>
    </target>

    <target name="migrations" description="Generate database migrations">
        <condition property="script_ext" value=".bat" else="">
            <os family="windows"/>
        </condition>
        <input message="Migration name" addproperty="migrationName"/>
        <exec executable="${basedir}/vendor/bin/phinx-migrations.bat" dir="${basedir}/config" osfamily="windows">
            <arg line="generate --name ${migrationName} --overwrite"/>
        </exec>
    </target>

    <target name="deploy" description="get your Repository from GitHub to your build folder">
        <!-- Choose, which environment you want to deploy -->
        <input message="Which config should be used?"
               validArgs="test,staging,prod"
               addproperty="config"
        />
        <property file="${basedir}/config/ant.${config}.properties"/>

        <!-- Build project -->
        <antcall target="build"/>

        <!-- Upload deploy.php -->
        <echo message="Uploading deploy.php ..."/>
        <scp file="${build_dir}/deploy.php"
             todir="${build.ftp.user}:${build.ftp.password}@${build.ftp.host}:${build.ftp.dir}"
             trust="true"/>

        <!-- Upload clean-up.php -->
        <echo message="uploading clean-up.php ..."/>
        <scp file="${build_dir}/clean-up.php"
             todir="${build.ftp.user}:${build.ftp.password}@${build.ftp.host}:${build.ftp.dir}"
             trust="true"/>

        <!-- Deleting clean-up.php and deploy.php -->
        <echo message="Deleting clean-up.php and deploy.php"/>
        <delete file="${build_dir}/clean-up.php"/>
        <delete file="${build_dir}/deploy.php"/>

        <!-- Upload zip-file -->
        <echo message="Uploading ${filename} ..."/>
        <scp file="${build_dir}/${filename}"
             todir="${build.ftp.user}:${build.ftp.password}@${build.ftp.host}:${build.ftp.dir}"
             trust="true"/>

        <!-- Delete old directories -->
        <delete dir="${build_dir}/master"/>
        <delete file="${build_dir}/master.zip"/>
        <delete file="${build_dir}/${filename}"/>


        <!-- Call deploy.php for zip-file -->
        <sshexec host="${build.ftp.host}"
                 username="${build.ftp.user}"
                 password="${build.ftp.password}"
                 command="cd ${build.ftp.dir};php deploy.php ${filename}"
                 usepty="true"
                 trust="true"
        />
    </target>

    <target name="build">
        <!-- Download newest repository master -->
        <antcall target="get-repo"/>

        <!-- Install composer.phar, if this file isn't already in the buildfolder -->
        <get src="https://getcomposer.org/composer.phar" dest="${build_dir}" skipexisting="true"/>

        <!-- Install project dependencies -->
        <exec executable="php" failonerror="true">
            <arg line="${build_dir}/composer.phar install --no-dev --optimize-autoloader -d ${build_dir}/master"/>
        </exec>
        <move file="${build_dir}/master/config/deploy.php" todir="${build_dir}"/>
        <move file="${build_dir}/master/config/clean-up.php" todir="${build_dir}"/>
        <!-- Clean up build -->
        <antcall target="clean-build"/>

        <!-- Zip master into file -->
        <zip basedir="${build_dir}/master" destfile="${build_dir}/${filename}"/>
    </target>

    <target name="get-repo">
        <delete dir="${build_dir}/master"/>
        <mkdir dir="${build_dir}/master"/>
        <exec executable="git" failonerror="true">
            <arg line="archive  --format zip --output ${build_dir}/master.zip master"/>
        </exec>
        <unzip src="${build_dir}/master.zip" dest="${build_dir}/master"/>
    </target>

    <target name="clean-build">
        <delete dir="${build_dir}/master/tests"/>
        <delete file="${build_dir}/master/.gitignore"/>
        <delete file="${build_dir}/master/.styleci.yml"/>
        <delete file="${build_dir}/master/.scrudinizer.yml"/>
        <delete file="${build_dir}/master/build.xml"/>
        <delete file="${build_dir}/master/phpstan.neon"/>
        <delete file="${build_dir}/master/README.md"/>
        <delete file="${build_dir}/master/composer.json"/>
        <delete file="${build_dir}/master/composer.lock"/>
        <delete file="${build_dir}/master/config/ant.example.properties"/>
        <delete file="${build_dir}/master/config/env.example.php"/>
        <delete file="${build_dir}/master/config/clean-up.php"/>
        <delete file="${build_dir}/master/config/deploy.php"/>
        <delete dir="${build_dir}/master/docs"/>
        <delete dir="${build_dir}/master/vendor/phpstan"/>
        <delete dir="${build_dir}/master/vendor/monolog/monolog/doc"/>
        <delete dir="${build_dir}/master/vendor/monolog/monolog/tests"/>
        <delete dir="${build_dir}/master/vendor/dflydev/dot-access-data/tests"/>
        <delete dir="${build_dir}/master/vendor/league/plates/docs"/>
        <delete dir="${build_dir}/master/vendor/league/plates/examples"/>
        <delete dir="${build_dir}/master/vendor/phpmailer/phpmailer/examples"/>
        <delete dir="${build_dir}/master/vendor/symfony/cache/Tests"/>
        <delete dir="${build_dir}/master/vendor/symfony/http-foundation/Tests"/>
        <delete dir="${build_dir}/master/vendor/symfony/routing/Tests"/>
        <delete dir="${build_dir}/master/vendor/symfony/translation/Tests"/>
    </target>

    <target name="phpstan" description="DbBlockedUsersTest code for errors">
        <mkdir dir="${basedir}/build"/>
        <get src="https://github.com/phpstan/phpstan/releases/download/0.7/phpstan-0.7.phar"
             dest="${basedir}/build/phpstan.phar"
             skipexisting="true"/>
        <exec executable="php" failonerror="true">
            <arg line="${basedir}/build/phpstan.phar analyse --no-progress --level=5 -c phpstan.neon src"/>
        </exec>
        <exec executable="php" failonerror="true">
            <arg line="${basedir}/build/phpstan.phar analyse --no-progress --level=1 -c phpstan.neon tests"/>
        </exec>
    </target>

    <target name="php-lints">
        <apply executable="php"
               failonerror="true">
            <arg value="-l"/>
            <fileset dir="${basedir}">
                <include name="**/*.php"/>
                <include name="**/*.ctp"/>
                <exclude name="**/vendor/**/*.*"/>

                <!--Inspect only modified files-->
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${basedir}/vendor/bin/phpunit${ext}" searchpath="true" resolveexecutable="true" failonerror="true" taskname="phpunit">
            <arg value="-v"/>
            <arg value="--configuration" />
            <arg path="${basedir}/phpunit.xml" />
        </exec>
    </target>

    <target name="phpunit-actual" description="Run unit tests with PHPUnit">
        <exec executable="${basedir}/vendor/bin/phpunit${ext}" searchpath="true" resolveexecutable="true"
              failonerror="true" taskname="phpunit">
            <arg value="-v"/>
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
            <arg value="--group"/>
            <arg value="actual"/>
        </exec>
    </target>

    <target name="phpunit-coverage" description="Run unit tests with PHPUnit with coverage">
        <delete dir="${basedir}/build/coverage" />
        <mkdir dir="${basedir}/build/coverage" />
        <exec executable="${basedir}/vendor/bin/phpunit${ext}" searchpath="true" resolveexecutable="true" failonerror="true" taskname="phpunit-coverage">
            <arg value="--configuration" />
            <arg path="${basedir}/phpunit.xml" />
            <arg value="--coverage-clover" />
            <arg path="${basedir}/build/logs/clover.xml" />
            <arg value="--coverage-html" />
            <arg path="${basedir}/build/coverage" />
        </exec>
    </target>

</project>
